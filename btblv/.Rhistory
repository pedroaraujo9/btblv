#' @param replicates integer value with the number of replicates.
#' @param seed int seed for the random values.
#'
#' @return list
#' @export
#'
#' @examples
#' #
simulate_data = function(btblv_posterior, replicates, seed) {
set.seed(seed)
post_summary = btblv_posterior %>% btblv::posterior_summary()
btblv_data = btblv_posterior$btblv_data
E = post_summary$posterior_mean$E
phi = post_summary$posterior_mean$phi
sigma = post_summary$posterior_mean$sigma
beta = post_summary$posterior_mean$beta
kappa = post_summary$posterior_mean$kappa
alpha = post_summary$posterior_mean$alpha
if(btblv_posterior$precision == "single") {
kappa = kappa * (beta/beta)
}
group_index = btblv_data$data_wide$group_num
theta = .apply_increment_to_series(
E = E,
group_index = group_index,
sigma = sigma,
phi = phi
)
J = btblv_data$data_list_stan$J
K = btblv_data$data_list_stan$K
Ng = btblv_data$data_list_stan$Ng
n = btblv_data$data_list_stan$n
N = btblv_data$data_list_stan$N
mu_df = inv_logit(theta%*%t(alpha) + (matrix(1, n) %x% t(beta)))
mu_df = as.data.frame(mu_df)
true_beta_params = btblv_data$data_wide %>%
dplyr::select(ind_num:time_num) %>%
bind_cols(
mu_df
) %>%
tidyr::gather(item_num, mu, -ind_num, -group_num, -time_num) %>%
dplyr::mutate(item_num = stringr::str_remove(item_num, "V") %>% as.integer()) %>%
dplyr::left_join(
data.frame(
kappa = kappa %>% as.numeric(),
item_num = 1:J
),
by = "item_num"
) %>%
dplyr::arrange(group_num, time_num, item_num) %>%
dplyr::select(ind_num, item_num, group_num, time_num, mu, kappa) %>%
dplyr::right_join(
btblv_data$data,
by=c("item_num", "ind_num", "group_num", "time_num")
) %>%
dplyr::select(item, group, time, mu, kappa)
# generate data from the beta
sim_data_list = purrr::map(1:replicates, ~{
true_beta_params = true_beta_params %>%
dplyr::mutate(y = rbeta(n=N, mu*kappa, (1-mu)*kappa)) %>%
dplyr::select(-mu, -kappa)
names(true_beta_params) = btblv_data$columns
true_beta_params
})
post_summary$posterior_mean$theta = theta
out = list(
sim_data_list = sim_data_list,
btblv_data = btblv_data,
true_parameters = post_summary$posterior_mean,
seed = seed
)
return(out)
}
devtools::load_all()
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
class(c("mode"))
class(c("pca"))
?stats::varimax
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
a
varimax(matrix(rnorm(10*2), 10, 2))
varimax(matrix(rnorm(10*1), 10, 1))
a = matrix(rnorm(10*1), 10, 1)
a
varimax(a)
devtools::load_all()
devtools::test(filter = "extract_posterior")
btblv_data = create_btblv_data(
sim_data$sim_data_list[[1]],
"mx", "age", "country", "year"
)
.x = example_fit$single_K1
sim_data = .x %>%
extract_posterior() %>%
simulate_data(seed = 1, replicates = 3)
btblv_data = create_btblv_data(
sim_data$sim_data_list[[1]],
"mx", "age", "country", "year"
)
.x = example_fit$single_K1
sim_data = .x %>%
extract_posterior() %>%
simulate_data(seed = 1, replicates = 3)
.x$btblv_data$data_list_stan$K
devtools::load_all()
devtools::test(filter = "extract_posterior")
c("pca") %>% is.matrix()
c("mode") %>% is.matrix()
.x$stan_fit@par_dims
.x$stan_fit@par_dims[["alpha"]]
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "extract_posterior")
post = .x %>%
extract_posterior(alpha_reference = "mode", apply_varimax = TRUE) %>%
posterior_summary()
post$posterior_mean$alpha
devtools::test(filter = "extract_posterior")
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::load_all()
.x = example_fit$single_K1
post = .x %>%
extract_posterior(alpha_reference = "mode", apply_varimax = TRUE) %>%
posterior_summary()
post$posterior_mean$alpha
.x %>%
extract_posterior(alpha_reference = post$posterior_mean$alpha)
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::load_all()
devtools::test(filter = "extract_posterior")
.x = example_fit$single_K1
post = .x %>%
extract_posterior(alpha_reference = "mode", apply_varimax = TRUE) %>%
posterior_summary()
.x %>%
extract_posterior(alpha_reference = post$posterior_mean$alpha)
alpha_reference = post$posterior_mean$alpha
alpha_reference
dim_alpha_ref = alpha_reference %>% dim() %>% paste0("-")
dim_alpha_ref
dim_alpha_ref = alpha_reference %>% dim() %>% stringr::str_flatten("-")
dim_alpha_ref
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::document()
devtools::test(filter = "extract_posterior")
devtools::test()
library(tidyverse)
imifa_fit = readRDS("analysis/models/bfa-K=1-10.rds")
imifa_fit = readRDS("../analysis/models/bfa-K=1-10.rds")
list.files()
list.files("../")
list.files("../../")
imifa_fit = readRDS("../../analysis/models/bfa-K=1-10.rds")
imifa_fit
library(IMIFA)
IMIFA::get_IMIFA_results(imifa_fit, Q = 2)
post = IMIFA::get_IMIFA_results(imifa_fit, Q = 2)
post %>% class()
imifa_result = IMIFA::get_IMIFA_results(imifa_fit, Q = 2)
post$Means
post$Means %>% dim()
post$Means$mus$Cluster1 %>% dim()
post$Means$mus$Cluster1 %>% colMeans()
post$Means$mus$Cluster1 %>% t() %>% colMeans()
post$Means$mus$Cluster1 %>% t() %>% colMeans() %>% plot()
post$Loadings$lmats$Cluster1 %>% dim()
beta = post$Means$mus$Cluster1 %>% t()
post$Loadings$lmats$Cluster1 %>% t()
post$Loadings$lmats$Cluster1[, 1, ]
post$Loadings$lmats$Cluster1[, 1, ] %>% dim()
alpha_dim = dim(post$Loadings$lmats$Cluster1)
alpha_dim
alpha = array(dim = c(alpha_dim[3], alpha_dim[1], alpha_dim[2]))
dim(alpha)
K = alpha_dim[2]
J = alpha_dim[1]
iters = alpha_dim[3]
for(k in 1:K) {
alpha[,,k] = post$Loadings$lmats$Cluster1[, k, ] %>% t()
}
alpha
alpha %>% dim()
alpha_dim
theta_dim = dim(post$Scores$eta)
alpha_dim
alpha_dim
theta_dim
n = theta_dim[1]
beta = post$Means$mus$Cluster1 %>% t()
alpha = array(dim = c(iters, J, K))
theta = array(dim = c(iters, n, K))
for(k in 1:K) {
alpha[, , k] = post$Loadings$lmats$Cluster1[, k, ] %>% t()
theta[, , k] = post$Scores$eta[, k, ] %>% t()
}
kappa = post$Uniquenesses$psis$Cluster1 %>% t()
kappa
kappa %>% dim()
75*3
lf = readRDS("data_model.rds")
lf = readRDS("../../analysis/data/data_model.rds")
lf %>% glimpse()
data_btblv = btblv::create_btblv_data(
lf, "mx", "age", "country", "year"
)
data_btblv
data_btblv$data_list_stan$x %>% logit() %>% colMeans()
data_btblv$data_list_stan$x %>% btblv::logit() %>% colMeans()
imifa_result$Error$Median
imifa_result$Error$Post
imifa_result$Error$Final
data_btblv$data_list_stan$x %>% btblv::log() %>% colMeans()
data_btblv$data_list_stan$x %>% log() %>% colMeans()
imifa_fa_to_blv = function(data_btblv, imifa_result) {
alpha_dim = dim(imifa_result$Loadings$lmats$Cluster1)
theta_dim = dim(imifa_result$Scores$eta)
K = alpha_dim[2]
J = alpha_dim[1]
iters = alpha_dim[3]
n = theta_dim[1]
beta = imifa_result$Means$mus$Cluster1 %>% t()
alpha = array(dim = c(iters, J, K))
theta = array(dim = c(iters, n, K))
kappa = imifa_result$Uniquenesses$psis$Cluster1 %>% t()
for(k in 1:K) {
alpha[, , k] = imifa_result$Loadings$lmats$Cluster1[, k, ] %>% t()
theta[, , k] = imifa_result$Scores$eta[, k, ] %>% t()
}
post_sample_array = list()
post_sample_array[["beta"]] = beta
post_sample_array[["alpha"]] = alpha
post_sample_array[["theta"]] = theta
post_sample_array[["kappa"]] = kappa
}
imifa_to_blv = function(data_btblv, imifa_result) {
alpha_dim = dim(imifa_result$Loadings$lmats$Cluster1)
theta_dim = dim(imifa_result$Scores$eta)
K = alpha_dim[2]
J = alpha_dim[1]
iters = alpha_dim[3]
n = theta_dim[1]
beta = imifa_result$Means$mus$Cluster1 %>% t()
alpha = array(dim = c(iters, J, K))
theta = array(dim = c(iters, n, K))
kappa = imifa_result$Uniquenesses$psis$Cluster1 %>% t()
for(k in 1:K) {
alpha[, , k] = imifa_result$Loadings$lmats$Cluster1[, k, ] %>% t()
theta[, , k] = imifa_result$Scores$eta[, k, ] %>% t()
}
post_sample_array = list()
post_sample_array[["beta"]] = beta
post_sample_array[["alpha"]] = alpha
post_sample_array[["theta"]] = theta
post_sample_array[["kappa"]] = kappa
post_sample_chains_list = list()
for(param in names(post_sample_array)) {
param_dim = dim(post_sample_array[[param]])
post_sample_chains_list[[param]] = array(dim = c(param_dim, 1))
if(length(param_dim) == 2) {
post_sample_chains_list[[param]][,,1] = post_sample_array[[param]]
}else if(length(param_dim) == 3) {
post_sample_chains_list[[param]][,,,1] = post_sample_array[[param]]
}
}
out = list(
post_sample_array = post_sample_array,
post_sample_chains = post_sample_chains_list,
btblv_data = btblv_data
)
class(out) = c("fa_imifa_posterior")
return(out)
}
imifa_to_blv(data_btblv, imifa_result)
btblv_data = btblv::create_btblv_data(
lf, "mx", "age", "country", "year"
)
imifa_to_blv = function(btblv_data, imifa_result) {
alpha_dim = dim(imifa_result$Loadings$lmats$Cluster1)
theta_dim = dim(imifa_result$Scores$eta)
K = alpha_dim[2]
J = alpha_dim[1]
iters = alpha_dim[3]
n = theta_dim[1]
beta = imifa_result$Means$mus$Cluster1 %>% t()
alpha = array(dim = c(iters, J, K))
theta = array(dim = c(iters, n, K))
kappa = imifa_result$Uniquenesses$psis$Cluster1 %>% t()
for(k in 1:K) {
alpha[, , k] = imifa_result$Loadings$lmats$Cluster1[, k, ] %>% t()
theta[, , k] = imifa_result$Scores$eta[, k, ] %>% t()
}
post_sample_array = list()
post_sample_array[["beta"]] = beta
post_sample_array[["alpha"]] = alpha
post_sample_array[["theta"]] = theta
post_sample_array[["kappa"]] = kappa
post_sample_chains_list = list()
for(param in names(post_sample_array)) {
param_dim = dim(post_sample_array[[param]])
post_sample_chains_list[[param]] = array(dim = c(param_dim, 1))
if(length(param_dim) == 2) {
post_sample_chains_list[[param]][,,1] = post_sample_array[[param]]
}else if(length(param_dim) == 3) {
post_sample_chains_list[[param]][,,,1] = post_sample_array[[param]]
}
}
out = list(
post_sample_array = post_sample_array,
post_sample_chains = post_sample_chains_list,
btblv_data = btblv_data
)
class(out) = c("fa_imifa_posterior")
return(out)
}
imifa_to_blv(btblv_data, imifa_result)
bfa = imifa_to_blv(btblv_data, imifa_result)
bfa$post_sample_array$beta %>% dim()
bfa$post_sample_chains$beta %>% dim()
bfa$post_sample_chains$beta[,,1] %>% colMeans()
bfa$post_sample_chains$beta[,,1] %>% colMeans() %>% plot()
imifa_result = IMIFA::get_IMIFA_results(imifa_fit, Q = 1)
bfa = imifa_to_blv(btblv_data, imifa_result)
bfa$post_sample_array$beta %>% dim()
bfa$post_sample_array$alpha %>% dim()
bfa$post_sample_array$theta %>% dim()
bfa$post_sample_array$alpha[,,1] %>% colMeans()
bfa$post_sample_array$alpha[,,1] %>% colMeans() %>% plot()
saveRDS("inst/bfa_K=1.rds")
saveRDS(imifa_result, "inst/bfa_K=1.rds")
imifa_result = IMIFA::get_IMIFA_results(imifa_fit, Q = 2)
saveRDS(imifa_result, "inst/bfa_K=1.rds")
usethis::use_test("imifa_to_blv")
imifa_result = list()
imifa_result = list()
imifa_result = list(
imifa_result_K1 = IMIFA::get_IMIFA_results(imifa_fit, Q = 1),
imifa_result_K2 = IMIFA::get_IMIFA_results(imifa_fit, Q = 2)
)
saveRDS(imifa_result, "inst/imifa_result.rds")
btblv_data = btblv::create_btblv_data(
lf, "mx", "age", "country", "year"
)
data("example_fit")
imifa_result = list(
imifa_result_K1 = IMIFA::get_IMIFA_results(imifa_fit, Q = 1),
imifa_result_K2 = IMIFA::get_IMIFA_results(imifa_fit, Q = 2),
btblv_data = example_fit$single_K1$btblv_data
)
saveRDS(imifa_result, "inst/imifa_result.rds")
imifa_result = list(
fits = list(
imifa_result_K1 = IMIFA::get_IMIFA_results(imifa_fit, Q = 1),
imifa_result_K2 = IMIFA::get_IMIFA_results(imifa_fit, Q = 2)
),
btblv_data = example_fit$single_K1$btblv_data
)
saveRDS(imifa_result, "inst/imifa_result.rds")
library(testthat)
devtools::test(filter = "imifa_to_blv")
devtools::test(filter = "imifa_to_blv")
devtools::test(filter = "imifa_to_blv")
devtools::test(filter = "imifa_to_blv")
devtools::test(filter = "imifa_to_blv")
devtools::test()
devtools::test(filter = "posterior_summary")
example_fit$specific_K2 %>% extract_posterior()
a = example_fit$specific_K2 %>% extract_posterior()
a$post_sample_array$baseline_delta
a = example_fit$specific_K1 %>% extract_posterior()
a$post_sample_array$baseline_delta
a$post_sample_array$baseline_delta %>% plot()
a = example_fit$specific_K1 %>% extract_posterior()
a$post_sample_array$baseline_delta %>% plot()
a = example_fit$specific_K2 %>% extract_posterior()
a$post_sample_array$baseline_delta %>% plot()
a$post_sample_array %>% names()
devtools::test(filter = "posterior_summary")
devtools::test()
devtools::test(filter = "posterior_summary")
devtools::test()
post = example_fit$single_K1 %>%
extract_posterior(alpha_reference = "mode", apply_varimax = TRUE) %>%
posterior_summary()
devtools::test(filter = "posterior_summary")
devtools::test(filter = "extract_posterior")
devtools::test(filter = "check_fit")
.x = example_fit$single_K1
post_pred = .x %>%
extract_posterior() %>%
posterior_predict(seed = 1)
post_pred
post_pred$pred_post_sample
post_pred$pred_post_sample[1:10, 1:10]
devtools::test(filter = "posterior_predicit")
devtools::test(filter = "posterior_predict")
post_summ = .x %>%
extract_posterior()
post_summ
devtools::test(filter = "posterior_predict")
devtools::load_all()
post_summ = .x %>%
extract_posterior()
devtools::load_all()
devtools::test(filter = "posterior_predict")
devtools::test(filter = "check_fit")
devtools::test()
imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
devtools::load_all()
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
devtools::load_all()
imifa_result = readRDS("../imifa_result.rds")
imifa_result = readRDS("tests/imifa_result.rds")
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
test$precision
test %>% posterior_summary()
tt = test %>% posterior_summary()
tt$posterior_mean$beta
tt$posterior_mean$beta %>% plot()
tt$posterior_mean$alpha
tt$posterior_mean$alpha %>% plot()
tt$posterior_mean$kappa
tt$posterior_mean$kappa %>% plot()
tt$posterior_mean$kappa %>% log() %>% plot()
devtools::test(filter = "imifa_to_blv")
devtools::test(filter = "imifa_to_blv")
devtools::load_all()
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
devtools::load_all()
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
test$precision
tt = test %>% posterior_summary()
tt$posterior_mean$beta %>% plot()
test %>% posterior_predict()
test %>% posterior_predict(seed = 1)
devtools::load_all()
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
test$precision
tt = test %>% posterior_summary()
test %>% posterior_predict(seed = 1)
class(test)
devtools::load_all()
devtools::test(filter = "posterior_predict")
test %>% posterior_predict(seed = 1)
warnings()
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
test$post_sample_array$kappa
test$post_sample_array$kappa %>% dim()
devtools::load_all()
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K1)
test$precision
test$post_sample_array$kappa %>% dim()
test$post_sample_array$kappa[, 1]
test$post_sample_array$kappa[, 1] %>% hist()
test$post_sample_array$kappa[, 1] %>% sqrt() %>% hist()
devtools::load_all()
tt = test %>% posterior_predict(seed = 1)
tt$pred_post_summary_df
tt$pred_post_sample[1:10, 1:10]
btblv_posterior = test
iters = btblv_posterior$post_sample_array$beta %>% dim() %>% .[1]
N = btblv_posterior$btblv_data$data_list_stan$N
iters
N
pred_post_sample = matrix(nrow = iters, ncol = N)
theta = btblv_posterior$post_sample_array$theta
alpha = btblv_posterior$post_sample_array$alpha
beta = btblv_posterior$post_sample_array$beta
kappa = btblv_posterior$post_sample_array$kappa
precision = btblv_posterior$precision
theta %>% dim()
devtools::load_all()
devtools::test(filter = "posterior_predict")
tt = test %>% posterior_summary()
tt = test %>% posterior_predict(seed = 1)
tt$pred_post_sample %>% colMeans()
plot(tt$pred_post_sample %>% colMeans(), imifa_result$btblv_data$df$mx)
test = imifa_to_blv(imifa_result$btblv_data, imifa_result$fits$imifa_result_K2)
test$post_sample_array$kappa %>% dim()
test$precision
class(test)
tt = test %>% posterior_summary()
tt = test %>% posterior_predict(seed = 1)
plot(tt$pred_post_sample %>% colMeans(), imifa_result$btblv_data$df$mx)
summ = test %>% posterior_summary()
pred = test %>% posterior_predict(seed = 1)
check_fit(pred, summ)
devtools::load_all()
devtools::test()
devtools::test()
devtools::install()
devtools::install()
roxygen2::roxygenize()
devtools::install()
