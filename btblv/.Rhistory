devtools::document()
devtools::document()
devtools::load_all()
example_fit$single_K2$btblv_data
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
usethis::use_package("magrittr")
usethis::use_package("tidyr")
usethis::use_package("dplyr")
usethis::use_package("HDInterval")
devtools::load_all()
example_fit$single_K2$btblv_data
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
devtools::document()
usethis::use_package("purrr")
usethis::use_package()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
example_fit$single_K2$btblv_data
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
devtools::test()
example_fit$single_K2$btblv_data
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
devtools::install()
library(btblv)
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
library(btblv)
library(btblv)
devtools::load_all()
devtools::load_all()
devtools::test(filter = "check_fit")
example_fit$single_K2$btblv_data
library(btblv)
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
devtools::install()
example_fit$single_K2$btblv_data
library(btblv)
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 2, chains = 2, cores = 2, seed = 1
)
x = example_fit$specific_K2$btblv_data$data_list_stan$x
x %>% dim()
psych::fa(logit(x), nfactors = 2)
psych::fa(logit(x), nfactors = 1)
psych::fa(logit(x), nfactors = 3)
psych::fa(logit(x), nfactors = 4)
psych::fa(logit(x), nfactors = 5)
psych::fa(logit(x), nfactors = 6)
psych::fa(logit(x), nfactors = 24)
psych::fa(logit(x), nfactors = 10)
psych::fa(logit(x), nfactors = 5)
psot = fit %>% extract_posterior()
post = fit %>% extract_posterior()
summ = post %>% posterior_summary()
summ$posterior_mean$drift
conv = post %>% btblv::check_convergence()
warnings()
conv$beta
devtools::load()
devtools::load_all()
example_fit$single_K2$btblv_data
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 200, warmup = 100, thin = 2, chains = 2, cores = 2, seed = 1
)
post = fit %>% extract_posterior()
summ = post %>% posterior_summary()
conv = post %>% btblv::check_convergence()
conv$beta
post$post_sample_chains$beta %>% dim()
post$post_sample_chains$beta[, , 1] %>% colMeans()
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 2,
precision = "single",
drift = T,
iter = 300, warmup = 200, thin = 2, chains = 3, cores = 3, seed = 1
)
post = fit %>% extract_posterior()
summ = post %>% posterior_summary()
conv = post %>% btblv::check_convergence()
conv$beta
post$post_sample_chains$beta[, , 1] %>% colMeans()
example_fit$single_K2$btblv_data %>% logit()
example_fit$single_K2$btblv_data$data_list_stan$x
example_fit$single_K2$btblv_data$data_list_stan$x %>% logit() %>% colMeans()
example_fit$single_K2$btblv_data$data_list_stan$x %>% logit() %>% colMeans()
logit_mx = example_fit$single_K2$btblv_data$data_list_stan$x %>% logit() %>% colMeans()
plot(logit_mx, summ$posterior_mean$beta[, 1])
abline(a=0, b=1)
summ$posterior_mean$drift
summ$posterior_mean$drift %>% plot()
summ$posterior_mean$phi
summ$posterior_mean$sigma
summ$posterior_mean$theta
summ$posterior_mean$theta %>% plot()
summ$posterior_mean$alpha
summ$posterior_mean$alpha[, 1]
summ$posterior_mean$alpha[, 1] %>% plot()
-summ$posterior_mean$alpha[, 1] %>% plot()
-summ$posterior_mean$alpha[, 2] %>% plot()
devtools::load_all()
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 4,
precision = "single",
drift = T,
iter = 1000, warmup = 500, thin = 5, chains = 3, cores = 3, seed = 1
)
post = fit %>% extract_posterior()
summ = post %>% posterior_summary()
conv = post %>% btblv::check_convergence()
conv$beta
post$post_sample_chains$beta[, , 1] %>% colMeans()
logit_mx = example_fit$single_K2$btblv_data$data_list_stan$x %>% logit() %>% colMeans()
plot(logit_mx, summ$posterior_mean$beta[, 1])
abline(a=0, b=1)
summ$posterior_mean$drift %>% plot()
summ$posterior_mean$drift
summ$posterior_mean$sigma
-summ$posterior_mean$alpha[, 1] %>% plot()
-summ$posterior_mean$alpha[, 2] %>% plot()
-summ$posterior_mean$alpha[, 2] %>% plot()
-summ$posterior_mean$alpha[, 3] %>% plot()
-summ$posterior_mean$alpha[, 4] %>% plot()
post = fit %>% extract_posterior(apply_varimax = T)
summ = post %>% posterior_summary()
summ$posterior_mean$drift
plot(logit_mx, summ$posterior_mean$beta[, 1])
abline(a=0, b=1)
summ$posterior_mean$drift
summ$posterior_mean$phi
summ$posterior_mean$sigma
-summ$posterior_mean$alpha[, 1] %>% plot()
summ$posterior_mean$alpha[, 2] %>% plot()
summ$posterior_mean$alpha[, 1] %>% plot()
summ$posterior_mean$alpha[, 2] %>% plot()
summ$posterior_mean$alpha[, 3] %>% plot()
summ$posterior_mean$alpha[, 4] %>% plot()
summ$posterior_mean$alpha[, 1] %>% plot()
summ$posterior_mean$alpha[, 2] %>% plot()
summ$posterior_mean$alpha[, 1] %>% plot()
summ$posterior_mean$alpha[, 2] %>% plot()
summ$posterior_mean$alpha[, 3] %>% plot()
summ$posterior_mean$alpha[, 4] %>% plot()
plot(summ$posterior_mean$phi, summ$posterior_mean$sigma)
plot(logit(summ$posterior_mean$phi), summ$posterior_mean$sigma)
plot(log(summ$posterior_mean$sigma), logit(summ$posterior_mean$phi))
plot(log(summ$posterior_mean$drift), logit(summ$posterior_mean$phi))
summ$posterior_mean$theta
summ$posterior_mean$theta[, 1]
plot(summ$posterior_mean$theta[, 1], summ$posterior_mean$theta[, 2])
plot(summ$posterior_mean$theta[, 1], summ$posterior_mean$theta[, 3])
plot(summ$posterior_mean$theta[, 1], summ$posterior_mean$theta[, 4])
plot(summ$posterior_mean$theta[, 2], summ$posterior_mean$theta[, 4])
pred = post %>% posterior_predict(seed = 1)
check_fit(pred, summ)
post$post_sample_chains$drift %>% dim()
post$post_sample_chains$drift[,,1]
post$post_sample_chains$drift[,,1] %>% colMeans()
post$post_sample_chains$drift[,,1] %>% hist()
fit$drift
summ$posterior_summary_df
summ$posterior_summary_df$theta
conv$theta
conv$theta$rhat
conv$theta$rhat %>% hist()
abline(v=1.1)
conv$beta$rhat %>% hist()
abline(v=1.1)
conv$alpha$rhat %>% hist()
abline(v=1.1)
conv$theta %>% filter(rhat > 1.1)
summ$posterior_summary_df$theta
library(tidyverse)
summ$posterior_summary_df$theta %>%
ggplot(aes(x=year, y=mean)) +
geom_line() +
facet_wrap(. ~ K)
summ$posterior_summary_df$theta %>%
ggplot(aes(x=year, y=mean, group=country)) +
geom_line() +
facet_wrap(. ~ K)
summ$posterior_summary_df$theta %>%
ggplot(aes(x=year, y=mean, group=country)) +
geom_line() +
facet_wrap(. ~ K, scales = "free")
summ$posterior_summary_df$theta %>%
ggplot(aes(x=year, y=mean, group=country)) +
geom_line(alpha = 0.3) +
facet_wrap(. ~ K, scales = "free")
summ$posterior_summary_df$theta %>%
ggplot(aes(x=year, y=mean, group=country)) +
geom_line(alpha = 0.5) +
facet_wrap(. ~ K, scales = "free")
devtools::load_all()
devtools::load_all()
pkgbuild::compile_dll()
devtools::clean_dll()
pkgbuild::compile_dll()
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 4,
precision = "single",
drift = T,
iter = 2000, warmup = 1000, thin = 5, chains = 3, cores = 3, seed = 1
)
post = fit %>% extract_posterior(apply_varimax = T)
summ = post %>% posterior_summary()
pred = post %>% posterior_predict(seed = 1)
conv = post %>% btblv::check_convergence()
conv$alpha$rhat
conv$beta
summ$posterior_summary_df$theta %>%
ggplot(aes(x=year, y=mean, group=country)) +
geom_line(alpha = 0.5) +
facet_wrap(. ~ K, scales = "free")
check_fit(pred, summ)
library(rstan)
library(devtools)
library(magrittr)
library(tidyverse)
devtools::load_all()
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 4,
precision = "single",
drift = T,
iter = 20, warmup = 10, thin = 1, chains = 3, cores = 3, seed = 1
)
post = fit %>% extract_posterior(apply_varimax = T)
summ = post %>% posterior_summary()
post_stan = fit$stan_fit %>% extract()
post_stan = fit$stan_fit %>% rstan::extract()
post_stan$drift %>% dim()
post_stan$drift[1,,]
post_stan = fit$stan_fit %>% rstan::extract(permuted = F)
post_stan %>% dim()
post_stan[, 1, ]
post_stan[, 1, "drif[1]"]
post_stan[, 1, "drif[1,1]"]
post_stan[, 1, "drift[1,1]"]
devtools::load_all()
devtools::test(filter = "extract_posterior")
devtools::test()
devtools::load_all()
post = fit %>% extract_posterior(apply_varimax = T)
devtools::load_all()
post = fit %>% extract_posterior(apply_varimax = T)
stan_fit = fit$stan_fit
post_sample_chains = stan_fit %>% rstan::extract(permuted = FALSE)
chains = dim(post_sample_chains)[2]
params = stan_fit@model_pars
params_dims = stan_fit@par_dims
params = params[!(params %in% c("beta_expand", "log_sigma", "kappa"))]
params
params_dims
if(precision == "specific") {
params = params[params!="delta_raw"]
}
post_sample_chains_list = list()
post_sample_chains_list = list()
# reshape array to look similar to the permuted one
for(param in params) {
post_sample_chains_list[[param]] = .reshape_chain_posterior(
post_sample_chains,
param_name = param,
param_dims = params_dims[[param]]
)
}
post_sample_chains[["drift"]]
post_sample_chains_list[["drift"]]
post_sample_chains_list[["drift"]] %>% dim()
post_sample_chains_list[["alpha"]] %>% dim()
drift_array = post_sample_chains_list$drift[, chain, ,]
drift_array = post_sample_chains_list$drift[, 1, ,]
drift_array %>% dim()
alpha_array = post_sample_chains_list$alpha[, 1, ,]
alpha_array %>% dim()
chain_rotation_list = .get_rotation(
alpha_array,
reference_matrix
)
devtools::load_all()
post = fit %>% extract_posterior(apply_varimax = T)
devtools::load_all()
post = fit %>% extract_posterior(apply_varimax = T)
summ = post %>% posterior_summary()
summ$posterior_mean$drift
fit = fit_btblv(
example_fit$single_K2$btblv_data,
K = 4,
precision = "single",
drift = T,
iter = 100, warmup = 50, thin = 1, chains = 3, cores = 3, seed = 1
)
post = fit %>% extract_posterior(apply_varimax = T)
summ = post %>% posterior_summary()
summ$posterior_mean$drift
conv = post %>% btblv::check_convergence()
devtools::load_all()
devtools::test(filter = "check_convergence")
devtools::load_all()
post = fit %>% extract_posterior(apply_varimax = T)
conv = post %>% btblv::check_convergence()
conv$drift
devtools::install()
devtools::install()
devtools::load_all()
devtools::test()
devtools::install()
