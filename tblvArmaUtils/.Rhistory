x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
stopCluster(cl)
}
cores = 3
N = 1000
if(cores == 1) {
approx_mlog_like = foreach::foreach(g=1:Ng, .combine = "c") %do% {
cat(g, "\r")
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
}else{
pkgs = c("dplyr", "Rcpp", "tblvArmaUtils")
funcs = c("mc_log_mlike")
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
approx_mlog_like = foreach::foreach(g=1:Ng, .packages = pkgs, .export = funcs, .combine = "c") %do% {
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
stopCluster(cl)
}
parallel::stopCluster
if(cores == 1) {
approx_mlog_like = foreach::foreach(g=1:Ng, .combine = "c") %do% {
cat(g, "\r")
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
}else{
pkgs = c("dplyr", "Rcpp", "tblvArmaUtils")
funcs = c("mc_log_mlike")
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
approx_mlog_like = foreach::foreach(g=1:Ng, .packages = pkgs, .export = funcs, .combine = "c") %do% {
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
parallel::stopCluster(cl)
}
approx_mlog_like %>% sum()
example_data = list(
btblv_data =  post_sample$btblv_data,
btblv_posterior_summary = post_summ,
E_post_sample = post_sample$post_sample_array$rot_E
)
btblv_fit = btblv::example_fit$single_K2
post_sample = btblv_fit |> btblv::extract_posterior()
devtools::install_github(repo = "pedroaraujo9/tblv", subdir = "packages/btblv")
devtools::load_all()
btblv_fit = btblv::example_fit$single_K2
post_sample = btblv_fit |> btblv::extract_posterior()
post_summ = post_sample |> btblv::posterior_summary()
data_wide = post_sample$btblv_data$data |>
dplyr::select(ind_num, group_num, item, y) |>
dplyr::arrange(ind_num) |>
tidyr::spread(item, y)
data_matrix = post_sample$btblv_data$data_list_stan$x
K = post_sample$btblv_data$data_list_stan$K
alpha = post_summ$posterior_mean$alpha
beta = post_summ$posterior_mean$beta
kappa = post_summ$posterior_mean$kappa
if(post_sample$precision == "single") {
kappa = kappa * (beta/beta)
}
Ng = post_sample$btblv_data$data_list_stan$Ng
g = 1
cores = 3
N = 1000
if(cores == 1) {
approx_mlog_like = foreach::foreach(g=1:Ng, .combine = "c") %do% {
cat(g, "\r")
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
}else{
pkgs = c("dplyr", "Rcpp", "tblvArmaUtils")
funcs = c("mc_log_mlike")
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
approx_mlog_like = foreach::foreach(g=1:Ng, .packages = pkgs, .export = funcs, .combine = "c") %do% {
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
parallel::stopCluster(cl)
}
devtools::document()
devtools::load_all()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
usethis::use_test()
devtools::test("approx_mlog_like")
devtools::test(filter = "approx_mlog_like")
devtools::test(filter = "approx_mlog_like")
post_sample = btblv::example_fit$specific_K1 %>% extract_posterior()
post_sample$btblv_data$data_list_stan$Ng
btblv_data = btblv_posterior$btblv_data
btblv_data = post_sample$btblv_data
devtools::load_all()
devtools::test(filter = "approx_mlog_like")
devtools::test(filter = "approx_mlog_like")
btblv_fit = btblv::example_fit$single_K2
post_sample = btblv_fit |> btblv::extract_posterior()
post_summ = post_sample |> btblv::posterior_summary()
data_wide = post_sample$btblv_data$data |>
dplyr::select(ind_num, group_num, item, y) |>
dplyr::arrange(ind_num) |>
tidyr::spread(item, y)
data_matrix = post_sample$btblv_data$data_list_stan$x
K = post_sample$btblv_data$data_list_stan$K
alpha = post_summ$posterior_mean$alpha
beta = post_summ$posterior_mean$beta
kappa = post_summ$posterior_mean$kappa
if(post_sample$precision == "single") {
kappa = kappa * (beta/beta)
}
alpha
beta
kappa
Ng = post_sample$btblv_data$data_list_stan$Ng
g = 1
cores = 3
N = 1000
if(cores == 1) {
approx_mlog_like = foreach::foreach(g=1:Ng, .combine = "c") %do% {
cat(g, "\r")
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
}else{
pkgs = c("dplyr", "Rcpp", "tblvArmaUtils")
funcs = c("mc_log_mlike")
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
approx_mlog_like = foreach::foreach(g=1:Ng, .packages = pkgs, .export = funcs, .combine = "c") %do% {
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
parallel::stopCluster(cl)
}
if(cores == 1) {
approx_mlog_like = foreach::foreach(g=1:Ng, .combine = "c") %do% {
cat(g, "\r")
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::rcpp_mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
}else{
pkgs = c("dplyr", "Rcpp", "tblvArmaUtils")
funcs = c("mc_log_mlike")
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
approx_mlog_like = foreach::foreach(g=1:Ng, .packages = pkgs, .export = funcs, .combine = "c") %do% {
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::rcpp_mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
parallel::stopCluster(cl)
}
devtools::load_all()
devtools::load_all()
btblv::example_fit$single_K2 %>%
extract_posterior() %>%
approx_mlog_like(N = 1000)
btblv::example_fit$single_K1 %>%
extract_posterior() %>%
approx_mlog_like(N = 1000)
btblv_fit = btblv::example_fit$single_K1 %>%
post_sample = btblv_fit |> btblv::extract_posterior()
btblv_fit = btblv::example_fit$single_K1
post_sample = btblv_fit |> btblv::extract_posterior()
post_summ = post_sample |> btblv::posterior_summary()
data_wide = post_sample$btblv_data$data |>
dplyr::select(ind_num, group_num, item, y) |>
dplyr::arrange(ind_num) |>
tidyr::spread(item, y)
data_matrix = post_sample$btblv_data$data_list_stan$x
K = post_sample$btblv_data$data_list_stan$K
alpha = post_summ$posterior_mean$alpha
alpha
beta
kappa
K
if(post_sample$precision == "single") {
kappa = kappa * (beta/beta)
}
Ng = post_sample$btblv_data$data_list_stan$Ng
g = 1
cores = 3
N = 1000
if(cores == 1) {
approx_mlog_like = foreach::foreach(g=1:Ng, .combine = "c") %do% {
cat(g, "\r")
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::rcpp_mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
}else{
pkgs = c("dplyr", "Rcpp", "tblvArmaUtils")
funcs = c("mc_log_mlike")
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
approx_mlog_like = foreach::foreach(g=1:Ng, .packages = pkgs, .export = funcs, .combine = "c") %do% {
inds = data_wide |>
dplyr::filter(group_num == g) |>
dplyr::select(ind_num) |>
base::unlist()
data_group = data_matrix[inds, ]
phi = post_summ$posterior_mean$phi[g, 1]
sigma = post_summ$posterior_mean$sigma[g, 1]
E_post_sample_list = lapply(inds, function(i){
cbind(post_sample$post_sample_array$rot_E[, i, ])
})
log_mlike_sample = tblvArmaUtils::rcpp_mc_log_mlike(
N=N,
x = data_group,
alpha = alpha,
beta = beta,
kappa = kappa,
phi = phi,
sigma = sigma,
E_post_sample_list = E_post_sample_list
)
tblvArmaUtils::LSE(log_mlike_sample) - log(N)
}
parallel::stopCluster(cl)
}
devtools::load_all()
devtools::test()
devtools::document()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::document()
devtools::load_all()
devtools::test()
approx_mlog_like
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::test()
usethis::use_test("compute_BIC")
devtools::test(filter = "compute_BIC")
devtools::test(filter = "compute_BIC")
devtools::test(filter = "compute_BIC")
btblv_posterior = btblv::example_fit$single_K1 %>% extract_posterior()
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test(filter = "compute_BIC")
devtools::check()
usethis::use_package("btblv")
usethis::use_package("doParallel")
usethis::use_package("dplyr")
usethis::use_package("foreach")
usethis::use_package("tidyr")
devtools::check()
usethis::use_package("purrr")
usethis::use_mit_license()
devtools::document()
devtools::load_all()
devtools::test()
?rcpp_mc_log_mlike
devtools::document()
devtools::document()
devtools::load_all()
devtools::test()
devtools::check()
devtools::document()
devtools::check()
roxygen2::roxygenize()
devtools::load_all()
Rcpp::compileAttributes()
devtools::document()
devtools::load_all()
devtools::check()
roxygen2::roxygenize()
devtools::check()
devtools::install()
devtools::install()
library(btblv)
data("example_fit")
library(btblv)
data("example_fit")
devtools::document()
devtools::load_all()
devtools::test()
devtools::test()
?drive_auth_configure
?googledrive::drive_auth_configure
